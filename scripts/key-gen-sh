#!/bin/bash
master_keys_bucket1_name="ngallo"
declare -a master_keys_bucket1=(ngallo)
master_keys_bucket2_name="global"
declare -a master_keys_bucket2=(global)
master_keys_bucket3_name="nitro"
declare -a master_keys_bucket3=(nitro)
declare -a keys_bucket1=(ngallo)
declare -a keys_bucket2=(global)
declare -a keys_bucket3=(nitro-corporate nitro-tech tot-platform chg-platform p24-next axs-platform)
function create_keys() {
    local folder=$1
    local arr=("${@:2}")
    mkdir -p "./ssh-keys/$folder"
    for i in "${arr[@]}";
        do
            openssl rand -base64 32 > "./ssh-keys/$folder/$i.key"
        done
}

function encrypt_keys() {
    local encryption_key=$1
    local folder=$2
    for file in ./ssh-keys/$folder/*.key;
        do 
            openssl pkeyutl -encrypt -pubin -inkey $encryption_key -in $file -out $file.enc
        done
}

function decrypt_keys() {
    local key=$1
    local secret=$2
    local folder=$3
    for file in ./ssh-keys/$folder/*.key.enc;
        do 
            openssl pkeyutl -decrypt -inkey $key -in $file -out "${file%.*}.dec" -passin pass:$secret
            cmp  "${file%.*}.dec" "${file%.*}" && echo 'Decrypted is same as original'
        done
}

function create_master_ssh_keys() {
    local prefix=$1
    local secret=$2
    local label=$3
    local arr=("${@:4}")
    mkdir -p ./ssh-keys
    for i in "${arr[@]}";
        do
            ssh-keygen -t rsa -C $label -b 4096 -f "./ssh-keys/$prefix$i" -N "$secret" -m PEM
            ssh-keygen -e -f "./ssh-keys/$prefix$i.pub" -m PKCS8 > "./ssh-keys/$prefix$i.pub.pkcs8"
        done
}

function create_ssh_keys() {
    local label=$1
    local group=$2
    for f in ./ssh-keys/$group/*.key; 
        do
            key_name=${f%.*}
            ssh-keygen -t rsa -C $label -b 4096 -f "${key_name}_rsa" -N "$(cat $f)" -m PEM
            ssh-keygen -e -f "${key_name}_rsa.pub" -m PKCS8 > "${key_name}_rsa.pub.pkcs8"
        done
}

echo "Bucket 1 Secret for $master_keys_bucket1_name:"
read -s bucket_1_secret

echo "Bucket 1 Secret for $master_keys_bucket2_name:"
read -s bucket_2_secret

echo "Bucket 1 Secret for $master_keys_bucket3_name:"
read -s bucket_3_secret

rm -rf ./ssh-keys

create_keys "ngallo" "${keys_bucket1[@]}"
create_keys "global" "${keys_bucket2[@]}"
create_keys "nitro" "${keys_bucket3[@]}"

create_master_ssh_keys "master-key-" $bucket_1_secret "nicolagmt@hotmail.com" "${master_keys_bucket1[@]}"
create_master_ssh_keys "master-key-" $bucket_2_secret "anonymous" "${master_keys_bucket2[@]}"
create_master_ssh_keys "master-key-" $bucket_3_secret "amministrazione@nitroagility.com" "${master_keys_bucket3[@]}"

encrypt_keys ./ssh-keys/master-key-ngallo.pub.pkcs8 "ngallo"
encrypt_keys ./ssh-keys/master-key-global.pub.pkcs8 "global"
encrypt_keys ./ssh-keys/master-key-nitro.pub.pkcs8 "nitro"

decrypt_keys ./ssh-keys/master-key-ngallo $bucket_1_secret "ngallo"
decrypt_keys ./ssh-keys/master-key-global $bucket_2_secret "global"
decrypt_keys ./ssh-keys/master-key-nitro $bucket_3_secret "nitro"
for f in ./ssh-keys/**/*.key.dec; 
    do
        if [[ $OSTYPE == 'darwin'* ]]; then
            rm "$f"
        else
            shred -u "$f"
        fi
    done
create_ssh_keys "nicolagmt@hotmail.com" "ngallo"
create_ssh_keys "anonymous" "global"
create_ssh_keys "amministrazione@nitroagility.com" "nitro"

rm -rf ./build

mkdir -p ./build/nas/nitro-master
cp ./ssh-keys/*nitro* ./build/nas/nitro-master

mkdir -p ./build/nas/nitro
cp ./ssh-keys/nitro/* ./build/nas/nitro
rm ./build/nas/nitro/*.key

mkdir -p ./build/nas/nitro-target-host
cp ./ssh-keys/nitro/*.pub* ./build/nas/nitro-target-host

mkdir -p ./build/usb/master
cp ./ssh-keys/*master* ./build/usb/master

mkdir -p ./build/usb/nitro
cp ./ssh-keys/*nitro* ./build/usb/nitro
cp ./ssh-keys/nitro/* ./build/usb/nitro

mkdir -p ./build/usb/personal
cp ./ssh-keys/ngallo/* ./build/usb/personal
cp ./ssh-keys/global/* ./build/usb/personal
rm ./build/usb/personal/*.key


#openssl pkeyutl -decrypt -inkey ./ssh-keys/master-key-ngallo -in ./ssh-keys/ngallo/ngallo.key.enc -out ./build/nas/target-host/ngallo/ngallo.key
#openssl pkeyutl -encrypt -pubin -inkey ./build/nas/target-host/ngallo/ngallo_rsa.pub.pkcs8 -in ./message.txt -out ./message.txt.enc
#openssl pkeyutl -decrypt -inkey ./ssh-keys/ngallo/ngallo_rsa -in ./message.txt.enc -out ./message.txt.dec -passin file:./build/nas/target-host/ngallo/ngallo.key
#cmp  ./message.txt.dec ./message.txt && echo 'Decrypted is same as original'
